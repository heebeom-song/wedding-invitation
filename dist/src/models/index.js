"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sequelize = void 0;
const sequelize_1 = require("sequelize");
const config_1 = require("../../config/config");
const user_1 = __importDefault(require("./user"));
const token_1 = __importDefault(require("./token"));
const invitation_1 = __importDefault(require("./invitation"));
const guestInfo_1 = __importDefault(require("./guestInfo"));
const calendar_1 = __importDefault(require("./calendar"));
const map_1 = __importDefault(require("./map"));
const gallery_1 = __importDefault(require("./gallery"));
const account_1 = __importDefault(require("./account"));
const contact_1 = __importDefault(require("./contact"));
const notice_1 = __importDefault(require("./notice"));
const celebrationMsg_1 = __importDefault(require("./celebrationMsg"));
const sequelize = new sequelize_1.Sequelize(config_1.config.development);
exports.sequelize = sequelize;
const db = {};
// 모델들을 클래스로 정의했기 때문에 initialize 메소드 활용
invitation_1.default.initialize(sequelize);
db.Invitation = invitation_1.default;
token_1.default.initialize(sequelize);
db.Token = token_1.default;
guestInfo_1.default.initialize(sequelize);
db.GuestInfo = guestInfo_1.default;
calendar_1.default.initialize(sequelize);
db.Calendar = calendar_1.default;
map_1.default.initialize(sequelize);
db.Map = map_1.default;
gallery_1.default.initialize(sequelize);
db.Gallery = gallery_1.default;
account_1.default.initialize(sequelize);
db.Account = account_1.default;
contact_1.default.initialize(sequelize);
db.Contact = contact_1.default;
notice_1.default.initialize(sequelize);
db.Notice = notice_1.default;
celebrationMsg_1.default.initialize(sequelize);
db.CelebrationMsg = celebrationMsg_1.default;
user_1.default.initialize(sequelize);
db.User = user_1.default;
// 테이블 간 관계
db.User.hasMany(db.Invitation, { foreignKey: 'userId' });
db.Invitation.belongsTo(db.User, { foreignKey: 'userId' });
db.Invitation.hasMany(db.GuestInfo, { foreignKey: 'invitationId', as: 'guestInfos' });
db.GuestInfo.belongsTo(db.Invitation, { foreignKey: 'invitationId', as: 'guestInfos' });
db.Invitation.hasMany(db.Calendar, { foreignKey: 'invitationId', as: 'calendars' });
db.Calendar.belongsTo(db.Invitation, { foreignKey: 'invitationId', as: 'calendars' });
db.Invitation.hasMany(db.Map, { foreignKey: 'invitationId', as: 'maps' });
db.Map.belongsTo(db.Invitation, { foreignKey: 'invitationId', as: 'maps' });
db.Invitation.hasMany(db.Gallery, { foreignKey: 'invitationId', as: 'galleries' });
db.Gallery.belongsTo(db.Invitation, { foreignKey: 'invitationId', as: 'galleries' });
db.Invitation.hasMany(db.Account, { foreignKey: 'invitationId', as: 'accounts' });
db.Account.belongsTo(db.Invitation, { foreignKey: 'invitationId', as: 'accounts' });
db.Invitation.hasMany(db.Contact, { foreignKey: 'invitationId', as: 'contacts' });
db.Contact.belongsTo(db.Invitation, { foreignKey: 'invitationId', as: 'contacts' });
db.Invitation.hasMany(db.Notice, { foreignKey: 'invitationId', as: 'notices' });
db.Notice.belongsTo(db.Invitation, { foreignKey: 'invitationId', as: 'notices' });
db.Invitation.hasMany(db.CelebrationMsg, { foreignKey: 'invitationId', as: 'celebrationMsgs' });
db.CelebrationMsg.belongsTo(db.Invitation, { foreignKey: 'invitationId', as: 'celebrationMsgs' });
db.CelebrationMsg.belongsTo(db.User, { foreignKey: "userId" });
db.User.hasOne(db.Token, { foreignKey: 'userId' });
db.Token.belongsTo(db.User, { foreignKey: 'userId' });
db.sequelize = sequelize;
exports.default = db;
